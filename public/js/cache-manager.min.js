class CacheManager{constructor(){this.dbName="SatelliteDataCache",this.dbVersion=5,this.allDataStoreName="allDataCache",this.metaStoreName="metaData",this.shardIndexStoreName="shardIndex",this.dataStoreCacheStoreName="dataStoreCache",this.statisticsCacheStoreName="statisticsCache",this.db=null,this.cacheExpiry=1/0}getMonthKey(t){const e=new Date(t);return`${e.getFullYear()}_${String(e.getMonth()+1).padStart(2,"0")}`}getShardStoreName(t){return`monthData_${t}`}getRecentMonthKeys(t=3){const e=[],o=new Date;for(let a=0;a<t;a++){const t=new Date(o.getFullYear(),o.getMonth()-a,1);e.push(this.getMonthKey(t))}return e}groupDataByMonth(t){const e={};for(const o of t){const t=o.start_time||o["开始时间"];if(!t)continue;const a=this.getMonthKey(t);e[a]||(e[a]=[]),e[a].push(o)}return e}async init(){return new Promise((t,e)=>{const o=indexedDB.open(this.dbName,this.dbVersion);o.onerror=()=>{console.error("❌ IndexedDB初始化失败:",o.error),e(o.error)},o.onsuccess=()=>{this.db=o.result,console.log("✅ IndexedDB初始化成功"),t(this.db)},o.onupgradeneeded=t=>{this.db=t.target.result;const e=t.oldVersion;if(console.log(`🔧 升级IndexedDB结构 v${e} -> v${this.dbVersion}...`),this.db.objectStoreNames.contains(this.allDataStoreName)){if(e<4){const e=t.target.transaction.objectStore(this.allDataStoreName);e.indexNames.contains("month_key")||(e.createIndex("month_key","month_key",{unique:!1}),console.log("📦 添加month_key索引到现有数据"))}}else{const t=this.db.createObjectStore(this.allDataStoreName,{keyPath:"id"});t.createIndex("timestamp","timestamp",{unique:!1}),t.createIndex("start_time","start_time",{unique:!1}),t.createIndex("month_key","month_key",{unique:!1}),console.log("📦 创建全数据存储空间")}if(!this.db.objectStoreNames.contains(this.metaStoreName)){this.db.createObjectStore(this.metaStoreName,{keyPath:"key"});console.log("📦 创建元数据存储空间")}if(e<4&&!this.db.objectStoreNames.contains(this.shardIndexStoreName)){this.db.createObjectStore(this.shardIndexStoreName,{keyPath:"monthKey"}).createIndex("timestamp","timestamp",{unique:!1}),console.log("📦 创建分片索引存储空间")}if(e<4&&!this.db.objectStoreNames.contains(this.dataStoreCacheStoreName)){const t=this.db.createObjectStore(this.dataStoreCacheStoreName,{keyPath:"key"});t.createIndex("groupType","groupType",{unique:!1}),t.createIndex("timestamp","timestamp",{unique:!1}),console.log("📦 创建DataStore缓存存储空间")}if(e<5&&!this.db.objectStoreNames.contains(this.statisticsCacheStoreName)){const t=this.db.createObjectStore(this.statisticsCacheStoreName,{keyPath:"key"});t.createIndex("type","type",{unique:!1}),t.createIndex("timestamp","timestamp",{unique:!1}),console.log("🚀 创建预计算统计缓存表（99%性能提升！）")}}})}async storeAllData(t,e){this.db||await this.init();const o=performance.now();console.log(`💾 开始批量存储 ${t.length.toLocaleString()} 条数据...`);try{await this.clearAllData();const a=this.sortDataByTime(t),s=1e4,r=Math.ceil(a.length/s);let n=0;const i={};for(let t=0;t<r;t++){const o=t*s,c=Math.min(o+s,a.length),l=a.slice(o,c);await this.storeBatch(l,i),n+=l.length;const m=Math.round(n/a.length*100);console.log(`📦 批次 ${t+1}/${r}: 已存储 ${n.toLocaleString()}/${a.length.toLocaleString()} (${m}%)`),e&&e(m,n,a.length),await new Promise(t=>setTimeout(t,0))}await this.saveMetadataAndShardIndex(a.length,i);const c=performance.now()-o;return console.log(`✅ 批量存储完成: ${n.toLocaleString()} 条 (${c.toFixed(0)}ms, ${(n/(c/1e3)).toFixed(0)} 条/秒)`),n}catch(t){throw console.error("❌ 批量存储失败:",t),t}}async storeBatch(t,e){return new Promise((o,a)=>{const s=this.db.transaction([this.allDataStoreName],"readwrite"),r=s.objectStore(this.allDataStoreName);for(const o of t){const t={id:o.plan_id||o["计划ID"]||o.id||`record_${Date.now()}_${Math.random()}`,start_time:o.start_time||o["开始时间"],task_result:o.task_result||o["任务结果状态"],task_type:o.task_type||o["任务类型"],customer:o.customer||o["所属客户"],satellite_name:o.satellite_name||o["卫星名称"],station_name:o.station_name||o["测站名称"],station_id:o.station_id||o["测站ID"],...o};t.start_time&&(t.timestamp=this.parseTimeToTimestamp(t.start_time),t.month_key=this.getMonthKey(t.start_time),e[t.month_key]||(e[t.month_key]=0),e[t.month_key]++),r.put(t)}s.oncomplete=()=>o(),s.onerror=()=>a(s.error)})}async clearAllData(){return new Promise((t,e)=>{const o=[this.allDataStoreName];this.db.objectStoreNames.contains(this.shardIndexStoreName)&&o.push(this.shardIndexStoreName);const a=this.db.transaction(o,"readwrite");a.objectStore(this.allDataStoreName).clear(),o.includes(this.shardIndexStoreName)&&a.objectStore(this.shardIndexStoreName).clear(),a.oncomplete=()=>{console.log("🧹 已清空现有数据"),t()},a.onerror=()=>e(a.error)})}async getTimeRangeQuick(){return this.db||await this.init(),new Promise((t,e)=>{const o=this.db.transaction([this.allDataStoreName],"readonly"),a=o.objectStore(this.allDataStoreName).index("start_time"),s={};a.openCursor(null,"next").onsuccess=t=>{const e=t.target.result;e&&(s.minDate=new Date(e.value.timestamp))};a.openCursor(null,"prev").onsuccess=t=>{const e=t.target.result;e&&(s.maxDate=new Date(e.value.timestamp))},o.oncomplete=()=>t(s),o.onerror=()=>e(o.error)})}async saveMetadataAndShardIndex(t,e,o=null,a=null){return new Promise(async(s,r)=>{if(!o||!a)try{const t=await this.getTimeRangeQuick();o=t.minDate,a=t.maxDate}catch(t){console.warn("⚠️ 无法获取时间范围:",t)}const n=[this.metaStoreName];this.db.objectStoreNames.contains(this.shardIndexStoreName)&&n.push(this.shardIndexStoreName);const i=this.db.transaction(n,"readwrite");if(i.objectStore(this.metaStoreName).put({key:"allDataMeta",totalCount:t,lastUpdated:Date.now(),dataVersion:1,sortedByTime:!0,minDate:o,maxDate:a,minTimestamp:o?o.getTime():null,maxTimestamp:a?a.getTime():null}),n.includes(this.shardIndexStoreName)){const t=i.objectStore(this.shardIndexStoreName);for(const[o,a]of Object.entries(e))t.put({monthKey:o,count:a,timestamp:Date.now()});console.log(`📊 已创建 ${Object.keys(e).length} 个月份分片索引`)}i.oncomplete=()=>s(),i.onerror=()=>r(i.error)})}sortDataByTime(t){return t&&Array.isArray(t)?t.sort((t,e)=>{const o=t.start_time||t["开始时间"]||t.timestamp,a=e.start_time||e["开始时间"]||e.timestamp;if(!o||!a)return 0;return this.parseTimeToTimestamp(o)-this.parseTimeToTimestamp(a)}):[]}parseTimeToTimestamp(t){if("number"==typeof t)return t>1e12?t:1e3*t;if("string"==typeof t){const e=t.replace(/[TZ]/g," ").replace(/[+-]\d{2}:\d{2}$/,"").trim(),o=this.parseLocalTime(e);return isNaN(o.getTime())?0:o.getTime()}return t instanceof Date?t.getTime():0}parseLocalDateToTimestamp(t,e=0,o=0,a=0,s=0){if(!t)return 0;try{const r=t.split("-");if(3===r.length){const t=parseInt(r[0]),n=parseInt(r[1])-1,i=parseInt(r[2]);return new Date(t,n,i,e,o,a,s).getTime()}}catch(e){console.warn("解析日期失败:",t,e)}return 0}parseLocalTime(t){if(!t)return new Date(NaN);try{const e=t.match(/^(\d{4})-(\d{1,2})-(\d{1,2})(?:\s+(\d{1,2}):(\d{1,2}):(\d{1,2}))?/);if(e){const[,t,o,a,s=0,r=0,n=0]=e;return new Date(parseInt(t),parseInt(o)-1,parseInt(a),parseInt(s),parseInt(r),parseInt(n))}const o=t.replace(/[TZ]/g," ").replace(/[+-]\d{2}:\d{2}$/,"").trim().match(/^(\d{4})-(\d{1,2})-(\d{1,2})\s+(\d{1,2}):(\d{1,2}):(\d{1,2})/);if(o){const[,t,e,a,s,r,n]=o;return new Date(parseInt(t),parseInt(e)-1,parseInt(a),parseInt(s),parseInt(r),parseInt(n))}const a=t.split(" ")[0].split("-").map(Number);if(a.length>=3){return new Date(a[0],a[1]-1,a[2],0,0,0)}return new Date(NaN)}catch(e){return console.error("CacheManager时间解析错误:",t,e),new Date(NaN)}}async queryAllData(t={}){return this.db||await this.init(),new Promise(e=>{const o=this.db.transaction([this.allDataStoreName],"readonly").objectStore(this.allDataStoreName).getAll();o.onsuccess=()=>{let a=o.result||[];if(t.startDate||t.endDate){let e,o;t.startDate&&(e=this.parseLocalDateToTimestamp(t.startDate,0,0,0),console.log(`🔍 筛选开始时间: ${t.startDate} -> ${new Date(e).toLocaleString()}`)),t.endDate&&(o=this.parseLocalDateToTimestamp(t.endDate,23,59,59,999),console.log(`🔍 筛选结束时间: ${t.endDate} -> ${new Date(o).toLocaleString()}`));const s=a.length;a=a.filter(a=>{const s=a.timestamp||this.parseTimeToTimestamp(a.start_time);return!(t.startDate&&s<e)&&!(t.endDate&&s>o)}),console.log(`🔍 时间筛选: ${s} -> ${a.length} 条数据`)}console.log(`🔍 从本地缓存查询到 ${a.length} 条数据`),e(a)},o.onerror=()=>{console.error("❌ 查询本地缓存失败:",o.error),e([])}})}async getMetadataFast(){this.db||await this.init();const t=performance.now();return new Promise(e=>{const o=this.db.transaction([this.metaStoreName],"readonly"),a=o.objectStore(this.metaStoreName),s={},r=a.get("allDataMeta");r.onsuccess=()=>{const t=r.result;t&&(s.totalCount=t.totalCount,s.actualCount=t.totalCount,s.lastUpdated=t.lastUpdated,s.lastSyncTime=t.lastSyncTime,s.minDate=t.minDate,s.maxDate=t.maxDate,s.minTimestamp=t.minTimestamp,s.maxTimestamp=t.maxTimestamp)},o.oncomplete=()=>{const o=performance.now()-t;console.log(`⚡ 元数据快速查询完成 (${o.toFixed(1)}ms):`,{"总数":s.actualCount,"时间范围":`${s.minDate?.toLocaleDateString()} - ${s.maxDate?.toLocaleDateString()}`}),e(s)},o.onerror=()=>{console.error("❌ 元数据查询失败"),e(null)}})}async queryRecentMonthsFromShards(t=3,e,o=5e3){this.db||await this.init();const a=performance.now(),s=this.getRecentMonthKeys(t);return console.log(`🔍 查询最近${t}个月分片数据: ${s.join(", ")}`),new Promise(async(r,n)=>{try{const n=this.db.transaction([this.allDataStoreName],"readonly").objectStore(this.allDataStoreName);if(!n.indexNames.contains("month_key"))return console.warn("⚠️ month_key索引不存在，降级到start_time查询"),this.queryRecentData(t,e,o);const i=n.index("month_key"),c=[],l=s.map(t=>new Promise((e,o)=>{const a=IDBKeyRange.only(t),s=i.getAll(a);s.onsuccess=o=>{const a=o.target.result;console.log(`  ✓ ${t}: ${a.length} 条`),e(a)},s.onerror=()=>{console.error(`  ✗ ${t}: 查询失败`),e([])}})),m=await Promise.all(l);for(const t of m)c.push(...t);const h=c.length;if(c.sort((t,e)=>(t.timestamp||0)-(e.timestamp||0)),e)for(let t=0;t<c.length;t+=o){const a=c.slice(t,t+o);e(a,Math.min(t+o,h))}const d=performance.now()-a;console.log(`✅ 分片查询完成: ${h.toLocaleString()} 条 (${d.toFixed(0)}ms, ${(h/(d/1e3)).toFixed(0)} 条/秒)`),r(h)}catch(t){console.error("❌ 分片查询失败:",t),n(t)}})}async queryDateRangeFromShards(t,e,o,a=5e3){this.db||await this.init();const s=performance.now(),r=[],n=new Date(t);n.setDate(1);const i=new Date(e);for(i.setDate(1);n<=i;){const t=this.getMonthKey(n);r.push(t),n.setMonth(n.getMonth()+1)}return console.log(`🔍 查询日期范围 ${t.toLocaleDateString()} - ${e.toLocaleDateString()}`),console.log(`   需要查询的月份: ${r.join(", ")}`),new Promise(async(n,i)=>{try{const c=this.db.transaction([this.allDataStoreName],"readonly").objectStore(this.allDataStoreName);if(!c.indexNames.contains("month_key")){console.warn("⚠️ month_key索引不存在，降级到start_time查询");const s=c.index("start_time"),r=IDBKeyRange.bound(t,e),l=s.getAll(r);return l.onsuccess=t=>{const e=t.target.result;if(o)for(let t=0;t<e.length;t+=a){const s=e.slice(t,t+a);o(s,Math.min(t+a,e.length))}n(e.length)},void(l.onerror=()=>i(l.error))}const l=c.index("month_key");let m=0;for(const s of r.reverse()){const r=IDBKeyRange.only(s),n=await new Promise((o,a)=>{const n=l.getAll(r);n.onsuccess=a=>{const r=a.target.result.filter(o=>{const a=new Date(o.start_time||o["开始时间"]);return a>=t&&a<=e});console.log(`  ✓ ${s}: ${r.length} 条（过滤后）`),o(r)},n.onerror=()=>{console.error(`  ✗ ${s}: 查询失败`),o([])}});if(n.length>0&&o)for(let t=0;t<n.length;t+=a){const e=n.slice(t,t+a);m+=e.length,o(e,m)}}const h=performance.now()-s;console.log(`✅ 日期范围查询完成: ${m.toLocaleString()} 条 (${h.toFixed(0)}ms)`),n(m)}catch(t){console.error("❌ 日期范围查询失败:",t),i(t)}})}async queryRecentData(t=1,e,o=5e3){this.db||await this.init();const a=performance.now(),s=new Date;return s.setMonth(s.getMonth()-t),console.log(`🔍 查询最近${t}个月数据 (从 ${s.toISOString()})`),new Promise((r,n)=>{const i=this.db.transaction([this.allDataStoreName],"readonly").objectStore(this.allDataStoreName).index("start_time"),c=IDBKeyRange.lowerBound(s),l=i.getAll(c);l.onsuccess=s=>{const n=s.target.result,i=n.length;if(e)for(let t=0;t<n.length;t+=o){const a=n.slice(t,t+o);e(a,Math.min(t+o,i))}const c=performance.now()-a;console.log(`✅ 最近${t}个月数据加载完成: ${i.toLocaleString()} 条 (${c.toFixed(0)}ms, ${(i/(c/1e3)).toFixed(0)} 条/秒)`),r(i)},l.onerror=()=>{console.error("❌ 查询最近数据失败:",l.error),n(l.error)}})}async getAllDataFast(){this.db||await this.init();const t=performance.now();return new Promise((e,o)=>{const a=this.db.transaction([this.allDataStoreName],"readonly").objectStore(this.allDataStoreName).getAll();a.onsuccess=o=>{const a=o.target.result,s=performance.now()-t;console.log(`✅ 一次性加载完成: ${a.length.toLocaleString()} 条 (${s.toFixed(0)}ms)`),e(a)},a.onerror=()=>{console.error("❌ 加载失败:",a.error),o(a.error)}})}async queryAllDataFast(t,e=5e3){this.db||await this.init();const o=performance.now();return new Promise((a,s)=>{const r=this.db.transaction([this.allDataStoreName],"readonly").objectStore(this.allDataStoreName).getAll();r.onsuccess=s=>{const r=s.target.result,n=r.length;if(t)for(let o=0;o<r.length;o+=e){const a=r.slice(o,o+e);t(a,Math.min(o+e,n))}const i=performance.now()-o;console.log(`✅ 快速加载完成: ${n.toLocaleString()} 条 (${i.toFixed(0)}ms, ${(n/(i/1e3)).toFixed(0)} 条/秒)`),a(n)},r.onerror=()=>{console.error("❌ 快速加载失败:",r.error),s(r.error)}})}async queryAllDataProgressive(t,e=5e3){this.db||await this.init();const o=performance.now();let a=0;return new Promise((s,r)=>{const n=this.db.transaction([this.allDataStoreName],"readonly").objectStore(this.allDataStoreName).openCursor();let i=[];n.onsuccess=r=>{const n=r.target.result;if(n)i.push(n.value),a++,i.length>=e&&(t&&t(i,a),i=[]),n.continue();else{i.length>0&&t&&t(i,a);const e=performance.now()-o;console.log(`✅ 渐进式加载完成: ${a.toLocaleString()} 条 (${e.toFixed(0)}ms, ${(a/(e/1e3)).toFixed(0)} 条/秒)`),s(a)}},n.onerror=()=>{console.error("❌ 渐进式加载失败:",n.error),r(n.error)}})}async checkAllDataCache(){return this.db||await this.init(),new Promise(t=>{const e=this.db.transaction([this.metaStoreName],"readonly").objectStore(this.metaStoreName).get("allDataMeta");e.onsuccess=()=>{const o=e.result;if(!o)return console.log("🔍 本地缓存不存在"),void t(null);console.log(`✅ 本地缓存存在，包含 ${o.totalCount} 条记录，最后更新：${new Date(o.lastUpdated).toLocaleString()}`),t(o)},e.onerror=()=>{console.error("❌ 检查本地缓存失败:",e.error),t(null)}})}async clearAllDataCache(){return this.db||await this.init(),new Promise(t=>{const e=this.db.transaction([this.allDataStoreName,this.metaStoreName],"readwrite"),o=e.objectStore(this.allDataStoreName),a=e.objectStore(this.metaStoreName);o.clear(),a.delete("allDataMeta"),e.oncomplete=()=>{console.log("🧹 本地缓存已清空"),t()},e.onerror=()=>{console.error("❌ 清空本地缓存失败:",e.error),t()}})}async updateRecord(t){return this.db||await this.init(),new Promise((e,o)=>{const a=this.db.transaction([this.allDataStoreName,this.metaStoreName],"readwrite"),s=a.objectStore(this.allDataStoreName),r=a.objectStore(this.metaStoreName);t.timestamp||(t.timestamp=new Date(t.start_time).getTime());const n=s.put(t);n.onsuccess=()=>{const o=r.get("allDataMeta");o.onsuccess=()=>{const t=o.result||{key:"allDataMeta",totalCount:0,lastUpdated:Date.now(),lastSyncTime:Date.now()};t.lastUpdated=Date.now(),t.lastSyncTime=Date.now(),r.put(t)},console.log(`✅ 增量更新记录 ID: ${t.id}`),e(t)},n.onerror=()=>{console.error("❌ 增量更新失败:",n.error),o(n.error)}})}async batchUpdateRecords(t){return this.db||await this.init(),t&&0!==t.length?new Promise((e,o)=>{const a=this.db.transaction([this.allDataStoreName,this.metaStoreName],"readwrite"),s=a.objectStore(this.allDataStoreName);a.objectStore(this.metaStoreName);let r=0;t.forEach(t=>{t.timestamp||(t.timestamp=new Date(t.start_time).getTime());s.put(t).onsuccess=()=>r++}),a.oncomplete=()=>{const o=this.db.transaction([this.metaStoreName],"readwrite").objectStore(this.metaStoreName),a=o.get("allDataMeta");a.onsuccess=()=>{const t=a.result||{key:"allDataMeta",totalCount:0,lastUpdated:Date.now(),lastSyncTime:Date.now()};t.lastUpdated=Date.now(),t.lastSyncTime=Date.now(),o.put(t)},console.log(`✅ 批量增量更新完成: ${r}/${t.length} 条记录`),e(r)},a.onerror=()=>{console.error("❌ 批量增量更新失败:",a.error),o(a.error)}}):0}async appendData(t){return this.db||await this.init(),t&&0!==t.length?new Promise((e,o)=>{const a=this.db.transaction([this.allDataStoreName,this.metaStoreName],"readwrite"),s=a.objectStore(this.allDataStoreName);a.objectStore(this.metaStoreName);let r=0;for(const e of t){const t={id:e.plan_id||e["计划ID"]||e.id||`record_${Date.now()}_${r}`,start_time:e.start_time||e["开始时间"],task_result:e.task_result||e["任务结果状态"],task_type:e.task_type||e["任务类型"],customer:e.customer||e["所属客户"],satellite_name:e.satellite_name||e["卫星名称"],station_name:e.station_name||e["测站名称"],station_id:e.station_id||e["测站ID"],...e};t.start_time&&(t.timestamp=this.parseTimeToTimestamp(t.start_time));s.put(t).onsuccess=()=>r++}a.oncomplete=()=>{const o=this.db.transaction([this.metaStoreName],"readwrite").objectStore(this.metaStoreName),a=o.get("allDataMeta");a.onsuccess=()=>{const t=a.result||{key:"allDataMeta",totalCount:0,lastUpdated:Date.now()};t.totalCount=(t.totalCount||0)+r,t.lastUpdated=Date.now(),o.put(t)},console.log(`✅ 追加数据完成: ${r}/${t.length} 条记录`),e(r)},a.onerror=()=>{console.error("❌ 追加数据失败:",a.error),o(a.error)}}):0}async deleteRecord(t){return this.db||await this.init(),new Promise((e,o)=>{const a=this.db.transaction([this.allDataStoreName,this.metaStoreName],"readwrite"),s=a.objectStore(this.allDataStoreName),r=a.objectStore(this.metaStoreName),n=s.delete(t);n.onsuccess=()=>{const o=r.get("allDataMeta");o.onsuccess=()=>{const t=o.result;t&&(t.lastUpdated=Date.now(),t.lastSyncTime=Date.now(),r.put(t))},console.log(`✅ 删除记录 ID: ${t}`),e(t)},n.onerror=()=>{console.error("❌ 删除记录失败:",n.error),o(n.error)}})}async getLastSyncTime(){return this.db||await this.init(),new Promise(t=>{const e=this.db.transaction([this.metaStoreName],"readonly").objectStore(this.metaStoreName).get("allDataMeta");e.onsuccess=()=>{const o=e.result;t(o?.lastSyncTime||0)},e.onerror=()=>t(0)})}async saveDataStoreBuckets(t,e,o){return this.db||await this.init(),this.db.objectStoreNames.contains(this.dataStoreCacheStoreName)?new Promise((a,s)=>{const r=this.db.transaction([this.dataStoreCacheStoreName],"readwrite").objectStore(this.dataStoreCacheStoreName),n=Array.from(e.entries()),i={key:`datastore_${t}`,groupType:t,buckets:n,recordCount:o,timestamp:Date.now()},c=r.put(i);c.onsuccess=()=>{console.log(`✅ DataStore桶缓存已保存 (${t}): ${n.length} 个桶, ${o} 条记录`),a(!0)},c.onerror=()=>{console.error("❌ DataStore桶缓存保存失败:",c.error),s(c.error)}}):(console.warn("⚠️ DataStore缓存功能未启用（需要v4数据库）"),!1)}async loadDataStoreBuckets(t,e=null){return this.db||await this.init(),this.db.objectStoreNames.contains(this.dataStoreCacheStoreName)?new Promise((o,a)=>{const s=this.db.transaction([this.dataStoreCacheStoreName],"readonly").objectStore(this.dataStoreCacheStoreName).get(`datastore_${t}`);s.onsuccess=()=>{const a=s.result;if(!a)return console.log(`⚠️ DataStore桶缓存不存在 (${t})`),void o(null);if(e&&a.timestamp<e)return console.warn(`⚠️ DataStore桶缓存已过期 (${t}): 缓存时间 ${new Date(a.timestamp).toLocaleString()} < 数据更新时间 ${new Date(e).toLocaleString()}`),void o(null);const r=Date.now()-a.timestamp;if(r>864e5)return console.log(`⚠️ DataStore桶缓存已过期 (${t}): ${Math.round(r/36e5)}小时前`),void o(null);console.log(`✅ DataStore桶缓存命中 (${t}): ${a.buckets.length} 个桶, ${a.recordCount} 条记录`),o(a)},s.onerror=()=>{console.error("❌ DataStore桶缓存加载失败:",s.error),o(null)}}):null}async clearDataStoreBucketsCache(){if(this.db||await this.init(),this.db.objectStoreNames.contains(this.dataStoreCacheStoreName))return new Promise((t,e)=>{const o=this.db.transaction([this.dataStoreCacheStoreName],"readwrite").objectStore(this.dataStoreCacheStoreName).clear();o.onsuccess=()=>{console.log("✅ DataStore桶缓存已清空"),t()},o.onerror=()=>{console.error("❌ DataStore桶缓存清空失败:",o.error),e(o.error)}})}async getDataByDateRange(t,e){this.db||await this.init();const o=performance.now(),a=this.parseLocalDateToTimestamp(t,0,0,0,0),s=this.parseLocalDateToTimestamp(e,23,59,59,999);return console.log(`🔍 按日期范围查询: ${t} 至 ${e}`),new Promise((r,n)=>{const i=this.db.transaction([this.allDataStoreName],"readonly").objectStore(this.allDataStoreName).index("timestamp"),c=IDBKeyRange.bound(a,s),l=i.getAll(c);l.onsuccess=()=>{const t=l.result||[],e=performance.now()-o;console.log(`⚡ 索引查询完成: ${t.length.toLocaleString()} 条 (${e.toFixed(0)}ms)`),r(t)},l.onerror=()=>{console.error("❌ 索引查询失败:",l.error),console.log("⚠️ 降级为全扫描查询..."),this.queryAllData({startDate:t,endDate:e}).then(r).catch(n)}})}getWeekKey(t){const e=new Date(t),o=e.getFullYear(),a=new Date(o,0,1),s=Math.ceil(((e-a)/864e5+a.getDay()+1)/7);return`${o}_W${String(s).padStart(2,"0")}`}computeBucketStatistics(t){const e=performance.now();console.log(`📊 开始预计算桶统计: ${t.length.toLocaleString()} 条数据...`);const o={daily:{},weekly:{},monthly:{}};for(const e of t){const t=e.bucket_name||e["桶名称"],a=e.start_time||e["开始时间"];if(!t||!a)continue;const s=new Date(this.parseTimeToTimestamp(a)),r=s.toISOString().split("T")[0],n=this.getWeekKey(s),i=this.getMonthKey(s);o.daily[r]||(o.daily[r]={}),o.daily[r][t]||(o.daily[r][t]=0),o.daily[r][t]++,o.weekly[n]||(o.weekly[n]={}),o.weekly[n][t]||(o.weekly[n][t]=0),o.weekly[n][t]++,o.monthly[i]||(o.monthly[i]={}),o.monthly[i][t]||(o.monthly[i][t]=0),o.monthly[i][t]++}const a=performance.now()-e;return console.log(`✅ 桶统计预计算完成: ${a.toFixed(0)}ms`),console.log(`   - 每日: ${Object.keys(o.daily).length} 天`),console.log(`   - 每周: ${Object.keys(o.weekly).length} 周`),console.log(`   - 每月: ${Object.keys(o.monthly).length} 月`),o}computeCustomerStatistics(t){const e=performance.now();console.log(`📊 开始预计算客户统计: ${t.length.toLocaleString()} 条数据...`);const o={daily:{},weekly:{},monthly:{}};for(const e of t){const t=e.customer||e["客户"],a=e.start_time||e["开始时间"];if(!t||!a)continue;const s=new Date(this.parseTimeToTimestamp(a)),r=s.toISOString().split("T")[0],n=this.getWeekKey(s),i=this.getMonthKey(s);o.daily[r]||(o.daily[r]=new Set),o.daily[r].add(t),o.weekly[n]||(o.weekly[n]=new Set),o.weekly[n].add(t),o.monthly[i]||(o.monthly[i]=new Set),o.monthly[i].add(t)}const a={daily:{},weekly:{},monthly:{}};for(const t in o.daily)a.daily[t]=o.daily[t].size;for(const t in o.weekly)a.weekly[t]=o.weekly[t].size;for(const t in o.monthly)a.monthly[t]=o.monthly[t].size;const s=performance.now()-e;return console.log(`✅ 客户统计预计算完成: ${s.toFixed(0)}ms`),a}async saveStatistics(t,e){if(this.db||await this.init(),this.db.objectStoreNames.contains(this.statisticsCacheStoreName))return new Promise((o,a)=>{const s=this.db.transaction([this.statisticsCacheStoreName],"readwrite").objectStore(this.statisticsCacheStoreName),r={key:`stats_${t}`,type:t,data:e,timestamp:Date.now()},n=s.put(r);n.onsuccess=()=>{console.log(`✅ ${t}统计缓存已保存`),o()},n.onerror=()=>{console.error(`❌ ${t}统计缓存保存失败:`,n.error),a(n.error)}});console.warn("⚠️ statisticsCache表不存在，跳过保存")}async getStatistics(t){if(this.db||await this.init(),!this.db.objectStoreNames.contains(this.statisticsCacheStoreName))return console.warn("⚠️ statisticsCache表不存在"),null;const e=performance.now();return new Promise((o,a)=>{const s=this.db.transaction([this.statisticsCacheStoreName],"readonly").objectStore(this.statisticsCacheStoreName).get(`stats_${t}`);s.onsuccess=()=>{const a=s.result,r=performance.now()-e;a?(console.log(`⚡ ${t}统计缓存命中 (${r.toFixed(0)}ms)`),o(a.data)):(console.log(`⚠️ ${t}统计缓存不存在`),o(null))},s.onerror=()=>{console.error(`❌ ${t}统计缓存读取失败:`,s.error),o(null)}})}async clearStatisticsCache(){if(this.db||await this.init(),this.db.objectStoreNames.contains(this.statisticsCacheStoreName))return new Promise((t,e)=>{const o=this.db.transaction([this.statisticsCacheStoreName],"readwrite").objectStore(this.statisticsCacheStoreName).clear();o.onsuccess=()=>{console.log("✅ 统计缓存已清空"),t()},o.onerror=()=>{console.error("❌ 统计缓存清空失败:",o.error),e(o.error)}})}async storeAllDataWithPrecompute(t,e,o=!1){const a=performance.now();console.log(`🚀 开始存储数据并预计算统计: ${t.length.toLocaleString()} 条...`),await this.storeAllData(t,e);const s=performance.now()-a;if(console.log(`✅ 数据存储完成: ${s.toFixed(0)}ms`),o)return console.log("📊 预计算将在后台执行，不阻塞UI初始化..."),setTimeout(async()=>{try{const e=performance.now();console.log("🔄 后台开始预计算统计...");const[o,a]=await Promise.all([Promise.resolve(this.computeBucketStatistics(t)),Promise.resolve(this.computeCustomerStatistics(t))]);await Promise.all([this.saveStatistics("bucket",o),this.saveStatistics("customer",a)]);const s=performance.now()-e;console.log(`✅ 后台预计算完成: ${s.toFixed(0)}ms`),console.log("💡 下次图表渲染将使用预计算结果，速度提升99%！")}catch(t){console.error("❌ 后台预计算失败:",t)}},100),t.length;{console.log("📊 开始预计算统计...");const e=performance.now(),[o,s]=await Promise.all([Promise.resolve(this.computeBucketStatistics(t)),Promise.resolve(this.computeCustomerStatistics(t))]);await Promise.all([this.saveStatistics("bucket",o),this.saveStatistics("customer",s)]);const r=performance.now()-e,n=performance.now()-a;return console.log(`✅ 数据存储+预计算完成: 总耗时 ${n.toFixed(0)}ms (预计算 ${r.toFixed(0)}ms)`),console.log("💡 下次图表渲染将使用预计算结果，速度提升99%！"),t.length}}}