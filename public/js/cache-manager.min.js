class CacheManager{constructor(){this.dbName="SatelliteDataCache",this.dbVersion=4,this.allDataStoreName="allDataCache",this.metaStoreName="metaData",this.shardIndexStoreName="shardIndex",this.dataStoreCacheStoreName="dataStoreCache",this.db=null,this.cacheExpiry=1/0}getMonthKey(t){const e=new Date(t);return`${e.getFullYear()}_${String(e.getMonth()+1).padStart(2,"0")}`}getShardStoreName(t){return`monthData_${t}`}getRecentMonthKeys(t=3){const e=[],a=new Date;for(let o=0;o<t;o++){const t=new Date(a.getFullYear(),a.getMonth()-o,1);e.push(this.getMonthKey(t))}return e}groupDataByMonth(t){const e={};for(const a of t){const t=a.start_time||a["开始时间"];if(!t)continue;const o=this.getMonthKey(t);e[o]||(e[o]=[]),e[o].push(a)}return e}async init(){return new Promise((t,e)=>{const a=indexedDB.open(this.dbName,this.dbVersion);a.onerror=()=>{console.error("❌ IndexedDB初始化失败:",a.error),e(a.error)},a.onsuccess=()=>{this.db=a.result,console.log("✅ IndexedDB初始化成功"),t(this.db)},a.onupgradeneeded=t=>{this.db=t.target.result;const e=t.oldVersion;if(console.log(`🔧 升级IndexedDB结构 v${e} -> v${this.dbVersion}...`),this.db.objectStoreNames.contains(this.allDataStoreName)){if(e<4){const e=t.target.transaction.objectStore(this.allDataStoreName);e.indexNames.contains("month_key")||(e.createIndex("month_key","month_key",{unique:!1}),console.log("📦 添加month_key索引到现有数据"))}}else{const t=this.db.createObjectStore(this.allDataStoreName,{keyPath:"id"});t.createIndex("timestamp","timestamp",{unique:!1}),t.createIndex("start_time","start_time",{unique:!1}),t.createIndex("month_key","month_key",{unique:!1}),console.log("📦 创建全数据存储空间")}if(!this.db.objectStoreNames.contains(this.metaStoreName)){this.db.createObjectStore(this.metaStoreName,{keyPath:"key"});console.log("📦 创建元数据存储空间")}if(e<4&&!this.db.objectStoreNames.contains(this.shardIndexStoreName)){this.db.createObjectStore(this.shardIndexStoreName,{keyPath:"monthKey"}).createIndex("timestamp","timestamp",{unique:!1}),console.log("📦 创建分片索引存储空间")}if(e<4&&!this.db.objectStoreNames.contains(this.dataStoreCacheStoreName)){const t=this.db.createObjectStore(this.dataStoreCacheStoreName,{keyPath:"key"});t.createIndex("groupType","groupType",{unique:!1}),t.createIndex("timestamp","timestamp",{unique:!1}),console.log("📦 创建DataStore缓存存储空间")}}})}async storeAllData(t,e){this.db||await this.init();const a=performance.now();console.log(`💾 开始批量存储 ${t.length.toLocaleString()} 条数据...`);try{await this.clearAllData();const o=this.sortDataByTime(t),r=1e4,n=Math.ceil(o.length/r);let s=0;const i={};for(let t=0;t<n;t++){const a=t*r,c=Math.min(a+r,o.length),l=o.slice(a,c);await this.storeBatch(l,i),s+=l.length;const m=Math.round(s/o.length*100);console.log(`📦 批次 ${t+1}/${n}: 已存储 ${s.toLocaleString()}/${o.length.toLocaleString()} (${m}%)`),e&&e(m,s,o.length),await new Promise(t=>setTimeout(t,0))}await this.saveMetadataAndShardIndex(o.length,i);const c=performance.now()-a;return console.log(`✅ 批量存储完成: ${s.toLocaleString()} 条 (${c.toFixed(0)}ms, ${(s/(c/1e3)).toFixed(0)} 条/秒)`),s}catch(t){throw console.error("❌ 批量存储失败:",t),t}}async storeBatch(t,e){return new Promise((a,o)=>{const r=this.db.transaction([this.allDataStoreName],"readwrite"),n=r.objectStore(this.allDataStoreName);for(const a of t){const t={id:a.plan_id||a["计划ID"]||a.id||`record_${Date.now()}_${Math.random()}`,start_time:a.start_time||a["开始时间"],task_result:a.task_result||a["任务结果状态"],task_type:a.task_type||a["任务类型"],customer:a.customer||a["所属客户"],satellite_name:a.satellite_name||a["卫星名称"],station_name:a.station_name||a["测站名称"],station_id:a.station_id||a["测站ID"],...a};t.start_time&&(t.timestamp=this.parseTimeToTimestamp(t.start_time),t.month_key=this.getMonthKey(t.start_time),e[t.month_key]||(e[t.month_key]=0),e[t.month_key]++),n.put(t)}r.oncomplete=()=>a(),r.onerror=()=>o(r.error)})}async clearAllData(){return new Promise((t,e)=>{const a=[this.allDataStoreName];this.db.objectStoreNames.contains(this.shardIndexStoreName)&&a.push(this.shardIndexStoreName);const o=this.db.transaction(a,"readwrite");o.objectStore(this.allDataStoreName).clear(),a.includes(this.shardIndexStoreName)&&o.objectStore(this.shardIndexStoreName).clear(),o.oncomplete=()=>{console.log("🧹 已清空现有数据"),t()},o.onerror=()=>e(o.error)})}async getTimeRangeQuick(){return this.db||await this.init(),new Promise((t,e)=>{const a=this.db.transaction([this.allDataStoreName],"readonly"),o=a.objectStore(this.allDataStoreName).index("start_time"),r={};o.openCursor(null,"next").onsuccess=t=>{const e=t.target.result;e&&(r.minDate=new Date(e.value.timestamp))};o.openCursor(null,"prev").onsuccess=t=>{const e=t.target.result;e&&(r.maxDate=new Date(e.value.timestamp))},a.oncomplete=()=>t(r),a.onerror=()=>e(a.error)})}async saveMetadataAndShardIndex(t,e,a=null,o=null){return new Promise(async(r,n)=>{if(!a||!o)try{const t=await this.getTimeRangeQuick();a=t.minDate,o=t.maxDate}catch(t){console.warn("⚠️ 无法获取时间范围:",t)}const s=[this.metaStoreName];this.db.objectStoreNames.contains(this.shardIndexStoreName)&&s.push(this.shardIndexStoreName);const i=this.db.transaction(s,"readwrite");if(i.objectStore(this.metaStoreName).put({key:"allDataMeta",totalCount:t,lastUpdated:Date.now(),dataVersion:1,sortedByTime:!0,minDate:a,maxDate:o,minTimestamp:a?a.getTime():null,maxTimestamp:o?o.getTime():null}),s.includes(this.shardIndexStoreName)){const t=i.objectStore(this.shardIndexStoreName);for(const[a,o]of Object.entries(e))t.put({monthKey:a,count:o,timestamp:Date.now()});console.log(`📊 已创建 ${Object.keys(e).length} 个月份分片索引`)}i.oncomplete=()=>r(),i.onerror=()=>n(i.error)})}sortDataByTime(t){return t&&Array.isArray(t)?t.sort((t,e)=>{const a=t.start_time||t["开始时间"]||t.timestamp,o=e.start_time||e["开始时间"]||e.timestamp;if(!a||!o)return 0;return this.parseTimeToTimestamp(a)-this.parseTimeToTimestamp(o)}):[]}parseTimeToTimestamp(t){if("number"==typeof t)return t>1e12?t:1e3*t;if("string"==typeof t){const e=t.replace(/[TZ]/g," ").replace(/[+-]\d{2}:\d{2}$/,"").trim(),a=this.parseLocalTime(e);return isNaN(a.getTime())?0:a.getTime()}return t instanceof Date?t.getTime():0}parseLocalDateToTimestamp(t,e=0,a=0,o=0,r=0){if(!t)return 0;try{const n=t.split("-");if(3===n.length){const t=parseInt(n[0]),s=parseInt(n[1])-1,i=parseInt(n[2]);return new Date(t,s,i,e,a,o,r).getTime()}}catch(e){console.warn("解析日期失败:",t,e)}return 0}parseLocalTime(t){if(!t)return new Date(NaN);try{const e=t.match(/^(\d{4})-(\d{1,2})-(\d{1,2})(?:\s+(\d{1,2}):(\d{1,2}):(\d{1,2}))?/);if(e){const[,a,o,r,n=0,s=0,i=0]=e,c=new Date(parseInt(a),parseInt(o)-1,parseInt(r),parseInt(n),parseInt(s),parseInt(i));return console.log(`🔧 CacheManager解析: ${t} -> ${c.toLocaleString()}`),c}const a=t.replace(/[TZ]/g," ").replace(/[+-]\d{2}:\d{2}$/,"").trim().match(/^(\d{4})-(\d{1,2})-(\d{1,2})\s+(\d{1,2}):(\d{1,2}):(\d{1,2})/);if(a){const[,e,o,r,n,s,i]=a,c=new Date(parseInt(e),parseInt(o)-1,parseInt(r),parseInt(n),parseInt(s),parseInt(i));return console.log(`🔧 CacheManager解析ISO: ${t} -> ${c.toLocaleString()}`),c}console.warn("CacheManager时间解析使用默认0点时间:",t);const o=t.split(" ")[0].split("-").map(Number);if(o.length>=3){const e=new Date(o[0],o[1]-1,o[2],0,0,0);return console.log(`🔧 CacheManager回退解析: ${t} -> ${e.toLocaleString()}`),e}return new Date(NaN)}catch(e){return console.error("CacheManager时间解析错误:",t,e),new Date(NaN)}}async queryAllData(t={}){return this.db||await this.init(),new Promise(e=>{const a=this.db.transaction([this.allDataStoreName],"readonly").objectStore(this.allDataStoreName).getAll();a.onsuccess=()=>{let o=a.result||[];if(t.startDate||t.endDate){let e,a;t.startDate&&(e=this.parseLocalDateToTimestamp(t.startDate,0,0,0),console.log(`🔍 筛选开始时间: ${t.startDate} -> ${new Date(e).toLocaleString()}`)),t.endDate&&(a=this.parseLocalDateToTimestamp(t.endDate,23,59,59,999),console.log(`🔍 筛选结束时间: ${t.endDate} -> ${new Date(a).toLocaleString()}`));const r=o.length;o=o.filter(o=>{const r=o.timestamp||this.parseTimeToTimestamp(o.start_time);return!(t.startDate&&r<e)&&!(t.endDate&&r>a)}),console.log(`🔍 时间筛选: ${r} -> ${o.length} 条数据`)}console.log(`🔍 从本地缓存查询到 ${o.length} 条数据`),e(o)},a.onerror=()=>{console.error("❌ 查询本地缓存失败:",a.error),e([])}})}async getMetadataFast(){this.db||await this.init();const t=performance.now();return new Promise(e=>{const a=this.db.transaction([this.metaStoreName],"readonly"),o=a.objectStore(this.metaStoreName),r={},n=o.get("allDataMeta");n.onsuccess=()=>{const t=n.result;t&&(r.totalCount=t.totalCount,r.actualCount=t.totalCount,r.lastUpdated=t.lastUpdated,r.lastSyncTime=t.lastSyncTime,r.minDate=t.minDate,r.maxDate=t.maxDate,r.minTimestamp=t.minTimestamp,r.maxTimestamp=t.maxTimestamp)},a.oncomplete=()=>{const a=performance.now()-t;console.log(`⚡ 元数据快速查询完成 (${a.toFixed(1)}ms):`,{"总数":r.actualCount,"时间范围":`${r.minDate?.toLocaleDateString()} - ${r.maxDate?.toLocaleDateString()}`}),e(r)},a.onerror=()=>{console.error("❌ 元数据查询失败"),e(null)}})}async queryRecentMonthsFromShards(t=3,e,a=5e3){this.db||await this.init();const o=performance.now(),r=this.getRecentMonthKeys(t);return console.log(`🔍 查询最近${t}个月分片数据: ${r.join(", ")}`),new Promise(async(n,s)=>{try{const s=this.db.transaction([this.allDataStoreName],"readonly").objectStore(this.allDataStoreName);if(!s.indexNames.contains("month_key"))return console.warn("⚠️ month_key索引不存在，降级到start_time查询"),this.queryRecentData(t,e,a);const i=s.index("month_key"),c=[],l=r.map(t=>new Promise((e,a)=>{const o=IDBKeyRange.only(t),r=i.getAll(o);r.onsuccess=a=>{const o=a.target.result;console.log(`  ✓ ${t}: ${o.length} 条`),e(o)},r.onerror=()=>{console.error(`  ✗ ${t}: 查询失败`),e([])}})),m=await Promise.all(l);for(const t of m)c.push(...t);const h=c.length;if(c.sort((t,e)=>(t.timestamp||0)-(e.timestamp||0)),e)for(let t=0;t<c.length;t+=a){const o=c.slice(t,t+a);e(o,Math.min(t+a,h))}const d=performance.now()-o;console.log(`✅ 分片查询完成: ${h.toLocaleString()} 条 (${d.toFixed(0)}ms, ${(h/(d/1e3)).toFixed(0)} 条/秒)`),n(h)}catch(t){console.error("❌ 分片查询失败:",t),s(t)}})}async queryDateRangeFromShards(t,e,a,o=5e3){this.db||await this.init();const r=performance.now(),n=[],s=new Date(t);s.setDate(1);const i=new Date(e);for(i.setDate(1);s<=i;){const t=this.getMonthKey(s);n.push(t),s.setMonth(s.getMonth()+1)}return console.log(`🔍 查询日期范围 ${t.toLocaleDateString()} - ${e.toLocaleDateString()}`),console.log(`   需要查询的月份: ${n.join(", ")}`),new Promise(async(s,i)=>{try{const c=this.db.transaction([this.allDataStoreName],"readonly").objectStore(this.allDataStoreName);if(!c.indexNames.contains("month_key")){console.warn("⚠️ month_key索引不存在，降级到start_time查询");const r=c.index("start_time"),n=IDBKeyRange.bound(t,e),l=r.getAll(n);return l.onsuccess=t=>{const e=t.target.result;if(a)for(let t=0;t<e.length;t+=o){const r=e.slice(t,t+o);a(r,Math.min(t+o,e.length))}s(e.length)},void(l.onerror=()=>i(l.error))}const l=c.index("month_key");let m=0;for(const r of n.reverse()){const n=IDBKeyRange.only(r),s=await new Promise((a,o)=>{const s=l.getAll(n);s.onsuccess=o=>{const n=o.target.result.filter(a=>{const o=new Date(a.start_time||a["开始时间"]);return o>=t&&o<=e});console.log(`  ✓ ${r}: ${n.length} 条（过滤后）`),a(n)},s.onerror=()=>{console.error(`  ✗ ${r}: 查询失败`),a([])}});if(s.length>0&&a)for(let t=0;t<s.length;t+=o){const e=s.slice(t,t+o);m+=e.length,a(e,m)}}const h=performance.now()-r;console.log(`✅ 日期范围查询完成: ${m.toLocaleString()} 条 (${h.toFixed(0)}ms)`),s(m)}catch(t){console.error("❌ 日期范围查询失败:",t),i(t)}})}async queryRecentData(t=1,e,a=5e3){this.db||await this.init();const o=performance.now(),r=new Date;return r.setMonth(r.getMonth()-t),console.log(`🔍 查询最近${t}个月数据 (从 ${r.toISOString()})`),new Promise((n,s)=>{const i=this.db.transaction([this.allDataStoreName],"readonly").objectStore(this.allDataStoreName).index("start_time"),c=IDBKeyRange.lowerBound(r),l=i.getAll(c);l.onsuccess=r=>{const s=r.target.result,i=s.length;if(e)for(let t=0;t<s.length;t+=a){const o=s.slice(t,t+a);e(o,Math.min(t+a,i))}const c=performance.now()-o;console.log(`✅ 最近${t}个月数据加载完成: ${i.toLocaleString()} 条 (${c.toFixed(0)}ms, ${(i/(c/1e3)).toFixed(0)} 条/秒)`),n(i)},l.onerror=()=>{console.error("❌ 查询最近数据失败:",l.error),s(l.error)}})}async getAllDataFast(){this.db||await this.init();const t=performance.now();return new Promise((e,a)=>{const o=this.db.transaction([this.allDataStoreName],"readonly").objectStore(this.allDataStoreName).getAll();o.onsuccess=a=>{const o=a.target.result,r=performance.now()-t;console.log(`✅ 一次性加载完成: ${o.length.toLocaleString()} 条 (${r.toFixed(0)}ms)`),e(o)},o.onerror=()=>{console.error("❌ 加载失败:",o.error),a(o.error)}})}async queryAllDataFast(t,e=5e3){this.db||await this.init();const a=performance.now();return new Promise((o,r)=>{const n=this.db.transaction([this.allDataStoreName],"readonly").objectStore(this.allDataStoreName).getAll();n.onsuccess=r=>{const n=r.target.result,s=n.length;if(t)for(let a=0;a<n.length;a+=e){const o=n.slice(a,a+e);t(o,Math.min(a+e,s))}const i=performance.now()-a;console.log(`✅ 快速加载完成: ${s.toLocaleString()} 条 (${i.toFixed(0)}ms, ${(s/(i/1e3)).toFixed(0)} 条/秒)`),o(s)},n.onerror=()=>{console.error("❌ 快速加载失败:",n.error),r(n.error)}})}async queryAllDataProgressive(t,e=5e3){this.db||await this.init();const a=performance.now();let o=0;return new Promise((r,n)=>{const s=this.db.transaction([this.allDataStoreName],"readonly").objectStore(this.allDataStoreName).openCursor();let i=[];s.onsuccess=n=>{const s=n.target.result;if(s)i.push(s.value),o++,i.length>=e&&(t&&t(i,o),i=[]),s.continue();else{i.length>0&&t&&t(i,o);const e=performance.now()-a;console.log(`✅ 渐进式加载完成: ${o.toLocaleString()} 条 (${e.toFixed(0)}ms, ${(o/(e/1e3)).toFixed(0)} 条/秒)`),r(o)}},s.onerror=()=>{console.error("❌ 渐进式加载失败:",s.error),n(s.error)}})}async checkAllDataCache(){return this.db||await this.init(),new Promise(t=>{const e=this.db.transaction([this.metaStoreName],"readonly").objectStore(this.metaStoreName).get("allDataMeta");e.onsuccess=()=>{const a=e.result;if(!a)return console.log("🔍 本地缓存不存在"),void t(null);console.log(`✅ 本地缓存存在，包含 ${a.totalCount} 条记录，最后更新：${new Date(a.lastUpdated).toLocaleString()}`),t(a)},e.onerror=()=>{console.error("❌ 检查本地缓存失败:",e.error),t(null)}})}async clearAllDataCache(){return this.db||await this.init(),new Promise(t=>{const e=this.db.transaction([this.allDataStoreName,this.metaStoreName],"readwrite"),a=e.objectStore(this.allDataStoreName),o=e.objectStore(this.metaStoreName);a.clear(),o.delete("allDataMeta"),e.oncomplete=()=>{console.log("🧹 本地缓存已清空"),t()},e.onerror=()=>{console.error("❌ 清空本地缓存失败:",e.error),t()}})}async updateRecord(t){return this.db||await this.init(),new Promise((e,a)=>{const o=this.db.transaction([this.allDataStoreName,this.metaStoreName],"readwrite"),r=o.objectStore(this.allDataStoreName),n=o.objectStore(this.metaStoreName);t.timestamp||(t.timestamp=new Date(t.start_time).getTime());const s=r.put(t);s.onsuccess=()=>{const a=n.get("allDataMeta");a.onsuccess=()=>{const t=a.result||{key:"allDataMeta",totalCount:0,lastUpdated:Date.now(),lastSyncTime:Date.now()};t.lastUpdated=Date.now(),t.lastSyncTime=Date.now(),n.put(t)},console.log(`✅ 增量更新记录 ID: ${t.id}`),e(t)},s.onerror=()=>{console.error("❌ 增量更新失败:",s.error),a(s.error)}})}async batchUpdateRecords(t){return this.db||await this.init(),t&&0!==t.length?new Promise((e,a)=>{const o=this.db.transaction([this.allDataStoreName,this.metaStoreName],"readwrite"),r=o.objectStore(this.allDataStoreName);o.objectStore(this.metaStoreName);let n=0;t.forEach(t=>{t.timestamp||(t.timestamp=new Date(t.start_time).getTime());r.put(t).onsuccess=()=>n++}),o.oncomplete=()=>{const a=this.db.transaction([this.metaStoreName],"readwrite").objectStore(this.metaStoreName),o=a.get("allDataMeta");o.onsuccess=()=>{const t=o.result||{key:"allDataMeta",totalCount:0,lastUpdated:Date.now(),lastSyncTime:Date.now()};t.lastUpdated=Date.now(),t.lastSyncTime=Date.now(),a.put(t)},console.log(`✅ 批量增量更新完成: ${n}/${t.length} 条记录`),e(n)},o.onerror=()=>{console.error("❌ 批量增量更新失败:",o.error),a(o.error)}}):0}async appendData(t){return this.db||await this.init(),t&&0!==t.length?new Promise((e,a)=>{const o=this.db.transaction([this.allDataStoreName,this.metaStoreName],"readwrite"),r=o.objectStore(this.allDataStoreName);o.objectStore(this.metaStoreName);let n=0;for(const e of t){const t={id:e.plan_id||e["计划ID"]||e.id||`record_${Date.now()}_${n}`,start_time:e.start_time||e["开始时间"],task_result:e.task_result||e["任务结果状态"],task_type:e.task_type||e["任务类型"],customer:e.customer||e["所属客户"],satellite_name:e.satellite_name||e["卫星名称"],station_name:e.station_name||e["测站名称"],station_id:e.station_id||e["测站ID"],...e};t.start_time&&(t.timestamp=this.parseTimeToTimestamp(t.start_time));r.put(t).onsuccess=()=>n++}o.oncomplete=()=>{const a=this.db.transaction([this.metaStoreName],"readwrite").objectStore(this.metaStoreName),o=a.get("allDataMeta");o.onsuccess=()=>{const t=o.result||{key:"allDataMeta",totalCount:0,lastUpdated:Date.now()};t.totalCount=(t.totalCount||0)+n,t.lastUpdated=Date.now(),a.put(t)},console.log(`✅ 追加数据完成: ${n}/${t.length} 条记录`),e(n)},o.onerror=()=>{console.error("❌ 追加数据失败:",o.error),a(o.error)}}):0}async deleteRecord(t){return this.db||await this.init(),new Promise((e,a)=>{const o=this.db.transaction([this.allDataStoreName,this.metaStoreName],"readwrite"),r=o.objectStore(this.allDataStoreName),n=o.objectStore(this.metaStoreName),s=r.delete(t);s.onsuccess=()=>{const a=n.get("allDataMeta");a.onsuccess=()=>{const t=a.result;t&&(t.lastUpdated=Date.now(),t.lastSyncTime=Date.now(),n.put(t))},console.log(`✅ 删除记录 ID: ${t}`),e(t)},s.onerror=()=>{console.error("❌ 删除记录失败:",s.error),a(s.error)}})}async getLastSyncTime(){return this.db||await this.init(),new Promise(t=>{const e=this.db.transaction([this.metaStoreName],"readonly").objectStore(this.metaStoreName).get("allDataMeta");e.onsuccess=()=>{const a=e.result;t(a?.lastSyncTime||0)},e.onerror=()=>t(0)})}async saveDataStoreBuckets(t,e,a){return this.db||await this.init(),this.db.objectStoreNames.contains(this.dataStoreCacheStoreName)?new Promise((o,r)=>{const n=this.db.transaction([this.dataStoreCacheStoreName],"readwrite").objectStore(this.dataStoreCacheStoreName),s=Array.from(e.entries()),i={key:`datastore_${t}`,groupType:t,buckets:s,recordCount:a,timestamp:Date.now()},c=n.put(i);c.onsuccess=()=>{console.log(`✅ DataStore桶缓存已保存 (${t}): ${s.length} 个桶, ${a} 条记录`),o(!0)},c.onerror=()=>{console.error("❌ DataStore桶缓存保存失败:",c.error),r(c.error)}}):(console.warn("⚠️ DataStore缓存功能未启用（需要v4数据库）"),!1)}async loadDataStoreBuckets(t,e=null){return this.db||await this.init(),this.db.objectStoreNames.contains(this.dataStoreCacheStoreName)?new Promise((a,o)=>{const r=this.db.transaction([this.dataStoreCacheStoreName],"readonly").objectStore(this.dataStoreCacheStoreName).get(`datastore_${t}`);r.onsuccess=()=>{const o=r.result;if(!o)return console.log(`⚠️ DataStore桶缓存不存在 (${t})`),void a(null);if(e&&o.timestamp<e)return console.warn(`⚠️ DataStore桶缓存已过期 (${t}): 缓存时间 ${new Date(o.timestamp).toLocaleString()} < 数据更新时间 ${new Date(e).toLocaleString()}`),void a(null);const n=Date.now()-o.timestamp;if(n>864e5)return console.log(`⚠️ DataStore桶缓存已过期 (${t}): ${Math.round(n/36e5)}小时前`),void a(null);console.log(`✅ DataStore桶缓存命中 (${t}): ${o.buckets.length} 个桶, ${o.recordCount} 条记录`),a(o)},r.onerror=()=>{console.error("❌ DataStore桶缓存加载失败:",r.error),a(null)}}):null}async clearDataStoreBucketsCache(){if(this.db||await this.init(),this.db.objectStoreNames.contains(this.dataStoreCacheStoreName))return new Promise((t,e)=>{const a=this.db.transaction([this.dataStoreCacheStoreName],"readwrite").objectStore(this.dataStoreCacheStoreName).clear();a.onsuccess=()=>{console.log("✅ DataStore桶缓存已清空"),t()},a.onerror=()=>{console.error("❌ DataStore桶缓存清空失败:",a.error),e(a.error)}})}}