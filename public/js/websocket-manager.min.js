class WebSocketSyncManager{constructor(e){this.cacheManager=e,this.ws=null,this.wsUrl=this.getWebSocketUrl(),this.reconnectInterval=5e3,this.reconnectTimer=null,this.isConnected=!1,this.isReconnecting=!1,this.heartbeatInterval=null,this.missedHeartbeats=0,this.maxMissedHeartbeats=3,this.onSyncUpdate=null,this.onConnectionChange=null,this.initVisibilityListener()}initVisibilityListener(){document.addEventListener("visibilitychange",()=>{document.hidden?(this.savePageLeaveTime(),console.log("👋 页面隐藏，保存离开时间戳")):(console.log("👀 页面可见，检查是否需要补同步"),this.checkAndPerformCatchup())}),window.addEventListener("beforeunload",()=>{this.savePageLeaveTime()}),window.addEventListener("pagehide",()=>{this.savePageLeaveTime()})}savePageLeaveTime(){try{const e=Date.now();localStorage.setItem("satellitePageLeaveTime",e.toString()),console.log(`💾 保存页面离开时间: ${new Date(e).toLocaleString()}`)}catch(e){console.error("❌ 保存页面离开时间失败:",e)}}async checkAndPerformCatchup(){try{const e=localStorage.getItem("satellitePageLeaveTime");if(!e)return console.log("ℹ️ 无页面离开时间记录"),{hasNewData:!1,count:0};const t=parseInt(e),a=Date.now()-t;if(a>3e4){console.log(`🔄 页面离开 ${Math.round(a/1e3)} 秒，触发补同步`);return await this.performCatchupSync()||{hasNewData:!1,count:0}}return console.log(`ℹ️ 页面离开时间短 (${Math.round(a/1e3)}秒)，无需补同步`),{hasNewData:!1,count:0}}catch(e){return console.error("❌ 检查补同步失败:",e),{hasNewData:!1,count:0}}}getWebSocketUrl(){return CONFIG.isDevelopment?"ws://localhost:3000/ws":"function"==typeof window.getWebSocketUrl?window.getWebSocketUrl():CONFIG.isGitHubPages&&CONFIG.API_ENDPOINTS.websocket?CONFIG.API_ENDPOINTS.websocket:null}connect(){if(this.wsUrl)if(!this.ws||this.ws.readyState!==WebSocket.CONNECTING&&this.ws.readyState!==WebSocket.OPEN)try{console.log(`🔗 正在连接 WebSocket: ${this.wsUrl}`),this.ws=new WebSocket(this.wsUrl),this.ws.onopen=()=>this.handleOpen(),this.ws.onmessage=e=>this.handleMessage(e),this.ws.onclose=e=>this.handleClose(e),this.ws.onerror=e=>this.handleError(e)}catch(e){console.error("❌ WebSocket 连接失败:",e),this.scheduleReconnect()}else console.log("🔗 WebSocket 已连接，无需重复连接");else console.warn("⚠️ WebSocket URL 未配置，跳过实时同步")}async handleOpen(){console.log("✅ WebSocket 连接成功"),this.isConnected=!0,this.isReconnecting=!1,this.missedHeartbeats=0,this.onConnectionChange&&this.onConnectionChange(!0),this.startHeartbeat(),await this.performCatchupSync()}async handleMessage(e){try{const t=JSON.parse(e.data);switch(console.log("📨 收到 WebSocket 消息:",t),t.type){case"heartbeat":this.missedHeartbeats=0;break;case"data_change":await this.handleDataChange(t.data);break;case"batch_update":await this.handleBatchUpdate(t.data);break;default:console.warn("⚠️ 未知消息类型:",t.type)}}catch(e){console.error("❌ 处理 WebSocket 消息失败:",e)}}async handleDataChange(e){const{operation:t,record:a}=e;try{const e=t.toLowerCase();switch(e){case"insert":case"update":await this.cacheManager.updateRecord(a),console.log(`🔄 实时同步：${"insert"===e?"新增":"更新"} 记录 ID: ${a.id}`);break;case"delete":await this.cacheManager.deleteRecord(a.id),console.log(`🔄 实时同步：删除记录 ID: ${a.id}`);break;default:console.warn("⚠️ 未知操作类型:",t)}this.onSyncUpdate&&this.onSyncUpdate({operation:e,record:a})}catch(e){console.error("❌ 处理数据变更失败:",e)}}async handleBatchUpdate(e){const{records:t}=e;try{const e=await this.cacheManager.batchUpdateRecords(t);console.log(`🔄 批量实时同步：更新 ${e} 条记录`),this.onSyncUpdate&&this.onSyncUpdate({operation:"batch_update",count:e})}catch(e){console.error("❌ 批量更新失败:",e)}}handleClose(e){console.log(`🔌 WebSocket 连接关闭 (code: ${e.code}, reason: ${e.reason})`),this.isConnected=!1,this.stopHeartbeat(),this.onConnectionChange&&this.onConnectionChange(!1),e.wasClean||this.isReconnecting||this.scheduleReconnect()}handleError(e){console.error("❌ WebSocket 错误:",e)}scheduleReconnect(){this.isReconnecting||(this.isReconnecting=!0,console.log(`🔄 将在 ${this.reconnectInterval/1e3} 秒后重连...`),this.reconnectTimer=setTimeout(()=>{console.log("🔄 尝试重新连接 WebSocket..."),this.connect()},this.reconnectInterval))}startHeartbeat(){this.stopHeartbeat(),this.heartbeatInterval=setInterval(()=>{if(this.ws&&this.ws.readyState===WebSocket.OPEN){if(this.missedHeartbeats++,this.missedHeartbeats>=this.maxMissedHeartbeats)return console.warn("⚠️ 心跳超时，关闭连接并重连"),void this.ws.close();this.send({type:"heartbeat",timestamp:Date.now()})}},3e4)}stopHeartbeat(){this.heartbeatInterval&&(clearInterval(this.heartbeatInterval),this.heartbeatInterval=null)}async performCatchupSync(){try{const e=await this.cacheManager.getLastSyncTime();console.log(`🔄 开始断线补同步，最后同步时间: ${new Date(e).toLocaleString()}`);const t=CONFIG.isGitHubPages?CONFIG.API_ENDPOINTS.catchup||`${CONFIG.API_ENDPOINTS.records}/changes`:`${CONFIG.API_BASE_URL}/satellite/changes`,a=await fetch(`${t}?since=${e}`,{method:"GET",headers:{"Content-Type":"application/json"}});if(!a.ok)return console.warn(`⚠️ 补同步请求失败 (${a.status}): ${a.statusText}`),console.warn("💡 提示：补同步功能可选，不影响页面正常使用"),{hasNewData:!1,count:0};const s=await a.json();if(s.success&&s.data&&s.data.changes){const e=s.data.changes;return e.length>0?(console.log(`📦 收到 ${e.length} 条补同步变更`),await this.cacheManager.batchUpdateRecords(e),{hasNewData:!0,count:e.length}):(console.log("✅ 无需补同步，数据已是最新"),{hasNewData:!1,count:0})}return{hasNewData:!1,count:0}}catch(e){return console.error("❌ 断线补同步失败:",e),{hasNewData:!1,count:0}}}send(e){this.ws&&this.ws.readyState===WebSocket.OPEN?this.ws.send(JSON.stringify(e)):console.warn("⚠️ WebSocket 未连接，无法发送消息")}disconnect(){console.log("🔌 主动断开 WebSocket 连接"),this.isReconnecting=!1,this.reconnectTimer&&(clearTimeout(this.reconnectTimer),this.reconnectTimer=null),this.stopHeartbeat(),this.ws&&(this.ws.close(),this.ws=null),this.isConnected=!1,this.onConnectionChange&&this.onConnectionChange(!1)}}const cacheManager=new CacheManager,dataPreloader=new DataPreloader,wsSyncManager=new WebSocketSyncManager(cacheManager);async function fetchDataFromAPI(e={}){try{console.log("📍 从本地缓存获取数据:",e);const t={};e.start_date&&(t.startDate=e.start_date),e.end_date&&(t.endDate=e.end_date);const a=await cacheManager.queryAllData(t);return{success:!0,data:{records:a,count:a.length}}}catch(e){return console.error("❌ 从本地缓存获取数据失败:",e),showError("从本地缓存获取数据失败: "+e.message),{success:!1,data:{records:[],count:0}}}}async function fetchStatsFromAPI(e={}){try{const t=new URLSearchParams(e).toString(),a=getApiUrl("stats"),s=await fetch(`${a}?${t}`,{method:"GET",mode:"cors",credentials:"omit",headers:{"Content-Type":"application/json"}});if(!s.ok)throw new Error(`HTTP ${s.status}: ${s.statusText}`);const n=await s.json();if(!n.success)throw new Error(n.error||"获取统计数据失败");return n.data}catch(e){return console.error("获取统计数据失败:",e),showError("获取统计数据失败: "+e.message),null}}