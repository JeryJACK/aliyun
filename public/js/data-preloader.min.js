class DataPreloader{constructor(){this.isPreloading=!1,this.preloadProgress=0}async autoPreloadAllData(t=!1){try{console.log("🚀 页面加载：开始智能预载数据..."),this.isPreloading=!0,this.updatePreloadStatus("正在检查本地缓存...","loading");const e=await cacheManager.checkAllDataCache(),a=e?Date.now()-e.lastUpdated:1/0;if(t)console.log("🔄 强制刷新模式，跳过缓存检查...");else if(a<6e4)return console.log(`✅ 使用IndexedDB缓存（${Math.round(a/1e3)}秒前更新）`),this.updatePreloadStatus(`✅ 从本地缓存加载 ${e.totalCount} 条数据（秒速加载）`,"success"),this.isPreloading=!1,setTimeout(()=>this.backgroundUpdate(),5e3),{success:!0,totalCount:e.totalCount};console.log("📡 缓存过期或不存在，使用并行分片加载全量数据..."),this.updatePreloadStatus("正在并行获取数据...","loading");const o=await this.parallelShardedLoad((t,e,a)=>{this.updatePreloadStatus(`正在加载数据... ${e.toLocaleString()}/${a.toLocaleString()} (${t}%)`,"loading")});return this.updatePreloadStatus(`✅ 成功加载全量数据（${o.totalCount.toLocaleString()} 条）`,"success"),this.isPreloading=!1,console.log("🎯 全量数据已缓存，支持跨页面完整共享"),{success:!0,totalCount:o.totalCount}}catch(t){console.error("❌ 数据预载失败:",t),this.updatePreloadStatus("❌ 最近数据加载失败，尝试降级方案...","warning");try{const t=await this.fallbackLoadAll();return this.isPreloading=!1,t}catch(t){throw console.error("❌ 降级方案也失败:",t),this.updatePreloadStatus(`❌ 数据预载失败: ${t.message}`,"error"),this.isPreloading=!1,t}}}async parallelShardedLoad(t){const e=performance.now();console.log("🚀 启动流水线并行加载（边下边存）...");try{const a=new Date,o=new Date;o.setFullYear(o.getFullYear()-2);const n=this.generateQuarterlyShards(o,a);console.log(`📊 生成 ${n.length} 个季度分片（流水线并行）`);const r=4;let s=0,l=0;await cacheManager.clearAllData();for(let e=0;e<n.length;e+=r){const a=n.slice(e,e+r);console.log(`📥 流水线批次 ${Math.floor(e/r)+1}: 并行下载+存储 ${a.length} 个分片`);const o=a.map(async(e,a)=>{try{const a=performance.now(),o=await this.fetchShardData(e),r=performance.now()-a;if(o&&o.length>0){console.log(`  ✓ 下载 ${e.label}: ${o.length.toLocaleString()} 条 (${r.toFixed(0)}ms)`);const a=performance.now();await cacheManager.storeBatch(o,{});const c=performance.now()-a;console.log(`  💾 存储 ${e.label}: ${o.length.toLocaleString()} 条 (${c.toFixed(0)}ms)`),s+=o.length,l++;const i=Math.round(l/n.length*100);return t&&t(i,s,s),o.length}return 0}catch(t){return console.error(`❌ 分片 ${e.label} 流水线失败:`,t),0}});await Promise.all(o),await new Promise(t=>setTimeout(t,0))}console.log("📊 保存元数据和索引..."),await cacheManager.saveMetadataAndShardIndex(s,{});const c=performance.now()-e;return console.log(`✅ 流水线并行加载完成: ${s.toLocaleString()} 条 (${(c/1e3).toFixed(1)}秒, ${(s/(c/1e3)).toFixed(0)} 条/秒)`),console.log("⚡ 性能提升：下载和存储完全并行，无等待时间"),{success:!0,totalCount:s}}catch(t){throw console.error("❌ 流水线并行加载失败:",t),t}}generateQuarterlyShards(t,e){const a=[],o=new Date(t);for(;o<e;){const t=new Date(o),n=new Date(o);n.setMonth(n.getMonth()+3),n>e&&n.setTime(e.getTime()),a.push({start:t.toISOString(),end:n.toISOString(),label:`${t.getFullYear()}Q${Math.floor(t.getMonth()/3)+1}`}),o.setMonth(o.getMonth()+3)}return a}async fetchShardData(t){try{const e=getApiUrl("records")+`?startDate=${t.start}&endDate=${t.end}&no_limit=true`,a=await fetch(e,{method:"GET",headers:{Accept:"application/json","Accept-Encoding":"gzip, deflate, br"}});if(!a.ok)return console.warn(`⚠️ 分片 ${t.label} 请求失败: ${a.status}`),[];const o=await a.json();return o.success&&o.data.records?(console.log(`✓ 分片 ${t.label}: ${o.data.records.length.toLocaleString()} 条`),o.data.records):[]}catch(e){return console.error(`❌ 分片 ${t.label} 加载失败:`,e),[]}}async loadHistoricalData(){try{console.log("🔄 后台任务：开始加载历史数据...");const t=await cacheManager.getMetadataFast();if(!t||!t.minDate)return void console.log("⚠️ 无法获取元数据，跳过历史数据加载");const e=t.minDate,a=new Date;if(a.setFullYear(a.getFullYear()-2),e<=a)return void console.log("✅ 历史数据已完整，无需加载");console.log(`📡 加载历史数据: ${a.toLocaleDateString()} ~ ${e.toLocaleDateString()}`);const o=getApiUrl("records")+`?startDate=${a.toISOString()}&endDate=${e.toISOString()}&no_limit=true`,n=await fetch(o,{headers:{Accept:"application/json","Accept-Encoding":"gzip, deflate, br"}});if(!n.ok)throw new Error(`HTTP ${n.status}: ${n.statusText}`);const r=await n.json();if(r.success&&r.data.records&&r.data.records.length>0){const t=r.data.records;console.log(`✅ 获取 ${t.length} 条历史数据`),await cacheManager.appendData(t),console.log("✅ 历史数据已追加到缓存"),window.sharedDataManager&&window.sharedDataManager.notifyDataUpdate("insert",t)}else console.log("ℹ️ 无更多历史数据")}catch(t){console.error("⚠️ 后台加载历史数据失败（非致命）:",t)}}async fallbackLoadAll(){console.log("🔄 使用降级方案：加载全量数据..."),this.updatePreloadStatus("正在从数据库获取全部数据...","loading");const t=await this.fetchAllDataFromAPI();if(t&&t.length>0){console.log(`📥 成功获取 ${t.length.toLocaleString()} 条数据`),this.updatePreloadStatus(`正在缓存 ${t.length.toLocaleString()} 条数据...`,"loading");const e=await cacheManager.storeAllDataWithPrecompute(t,(t,e,a)=>{this.updatePreloadStatus(`正在缓存数据... ${e.toLocaleString()}/${a.toLocaleString()} (${t}%)`,"loading")},!0);return this.updatePreloadStatus(`✅ 成功加载 ${e.toLocaleString()} 条数据（预计算在后台执行）`,"success"),{success:!0,totalCount:e}}throw new Error("无法获取数据")}async backgroundUpdate(){try{console.log("🔄 后台静默更新缓存...");const t=await this.fetchAllDataFromAPI();t&&t.length>0&&(await cacheManager.storeAllDataWithPrecompute(t,null,!0),console.log(`✅ 后台缓存更新完成，更新了 ${t.length} 条数据（预计算在后台执行）`))}catch(t){console.warn("⚠️ 后台缓存更新失败:",t)}}async fetchAllDataFromAPI(){try{console.log("📡 开始从API一次性获取所有数据（无条数限制）...");const t={order_by:"start_time",sort:"ASC",no_limit:!0,fetch_all:!0};console.log("🔍 API调用参数:",t);const e=await this.fetchSinglePageFromAPI(t);return e&&e.length>0?(console.log(`✅ 成功一次性获取 ${e.length} 条记录`),e):(console.log("⚠️ 未获取到任何数据"),[])}catch(t){return console.error("❌ 获取全数据失败:",t),console.log("🔄 一次性获取失败，回退到分页获取模式..."),await this.fetchAllDataWithPagination()}}async fetchAllDataWithPagination(){try{console.log("📡 使用分页模式获取所有数据...");let t=[],e=0;const a=1e4;let o=!0,n=1,r=0;const s=5;for(;o;){console.log(`📄 [页面 ${n}] 获取数据 (offset: ${e}, 已累计: ${t.length} 条)...`);const l={offset:e,limit:a,order_by:"start_time",sort:"ASC"},c=await this.fetchSinglePageFromAPI(l);c&&c.length>0?(t.push(...c),console.log(`✅ [页面 ${n}] 获取 ${c.length} 条，累计: ${t.length} 条`),r=0,e+=a,n++):(r++,r>=s?(o=!1,console.log(`🏁 数据获取完成，总计: ${t.length} 条记录`)):(e+=a,n++)),await new Promise(t=>setTimeout(t,10))}return t}catch(t){throw console.error("❌ 分页获取数据失败:",t),t}}async fetchSinglePageFromAPI(t){try{const e={};for(const[a,o]of Object.entries(t))null!=o&&""!==o&&(e[a]=o);const a=new URLSearchParams(e).toString(),o=getApiUrl("records"),n=await fetch(`${o}?${a}`,{method:"GET",mode:"cors",credentials:"omit",headers:{Accept:"application/json","Accept-Encoding":"gzip, deflate, br","Content-Type":"application/json"}});if(!n.ok)throw new Error(`HTTP ${n.status}: ${n.statusText}`);const r=await n.json();if(!r.success)throw new Error(r.error||"获取数据失败");return r.data.records||[]}catch(t){throw console.error("❌ 单页API调用失败:",t),t}}updatePreloadStatus(t,e="info"){const a=document.getElementById("dbLoading"),o=document.getElementById("dbLoadingText"),n=document.getElementById("dbLoadingProgressBar");if(a)switch(o&&(o.textContent=t),n&&n.classList.add("hidden"),a.className="mb-6 p-3 rounded-lg",e){case"loading":a.classList.add("bg-primary/10","text-primary"),a.classList.remove("hidden");break;case"success":a.classList.add("bg-success/10","text-success"),setTimeout(()=>a.classList.add("hidden"),3e3);break;case"warning":a.classList.add("bg-warning/10","text-warning");break;case"error":a.classList.add("bg-danger/10","text-danger");break;default:a.classList.add("bg-primary/10","text-primary")}}}